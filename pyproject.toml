[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "MACRO"
description = "MAchine learning models for early prognosis prediction in CaRdiogenic shOck"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    { name = "Nicolás Nieto", email = "n.nieto@fz-juelich.de" },
    { name = "Fede Raimondo", email = "f.raimondo@fz-juelich.de" },
    { name = "Synchon Mandal", email = "s.mandal@fz-juelich.de" },
]
maintainers = [
    { name = "Nicolás Nieto", email = "n.nieto@fz-juelich.de" },
]
keywords = [
    "machine-learning", "web-service", "clinical",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Flask",
    "Intended Audience :: Healthcare Industry",    
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
dependencies = [
     "Flask==3.0.0",
     "Jinja2==3.1.2",
     "gunicorn==21.2.0",
     "python-dotenv==1.0.0",
     "Flask-Minify==0.42",
     "Flask-Session==0.5.0",
     "pandas==2.1.3",
     "Flask-WTF==1.2.1",
]
dynamic = ["version"]

[project.urls]
Repository = "https://github.com/N-Nieto/MACRO"

[project.optional-dependencies]
dev = ["pre-commit", "tox"]

################
# Tool configs #
################

[tool.setuptools]
packages = ["juclinical"]

[tool.setuptools_scm]
version_scheme = "guess-next-dev"
local_scheme = "no-local-version"
write_to = "macro/_version.py"

[tool.black]
line-length = 79
target-version = ["py38", "py39", "py310", "py311"]

[tool.codespell]
skip = ".git/,*.pyc,*/_build/*"
count = ""
quiet-level = 3
interactive = 0
builtin = "clear,rare,informal,names,usage,code"

[tool.ruff]
line-length = 79
select = [
    # flake8-bugbear
    "B",
    # flake8-blind-except
    "BLE",
    # flake8-comprehensions
    "C4",
    # mccabe
    "C90",
    # pydocstyle
    "D",
    # pycodestyle errors
    "E",
    # pyflakes
    "F",
    # isort
    "I",
    # pep8-naming
    "N",
    # pygrep-hooks
    "PGH",
    # ruff
    "RUF",
    # flake8-type-checking
    "TCH",
    # pyupgrade
    "UP",
    # pycodestyle warnings
    "W",
    # flake8-2020
    "YTT",
]
extend-exclude = [
    "__init__.py",
]
extend-ignore = [
    # Use of `functools.lru_cache` or `functools.cache` on methods can lead to
    # memory leaks. The cache may retain instance references, preventing garbage
    # collection.
    "B019",
    # abstract class with no abstract methods
    "B024",
    "D202",
    # missing docstring in __init__, incompatible with numpydoc
    "D107",
    # use r""" if any backslashes in a docstring
    "D301",
    # class names should use CapWords convention
    "N801",
    # function name should be lowercase
    "N802",
    # variable in function should be lowercase
    "N806",
    # use specific rule codes when ignoring type issues
    "PGH003",
]

[tool.ruff.isort]
lines-after-imports = 2
known-first-party = ["macro"]
known-third-party =[
    "flask",
    "flask_session",
    "pandas",
    "flask_wtf",
    "wtforms",
]

[tool.ruff.mccabe]
max-complexity = 20

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-vv"